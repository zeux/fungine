Index: source/ComObject.cpp
===================================================================
--- source/ComObject.cpp	(revision 2067)
+++ source/ComObject.cpp	(working copy)
@@ -34,38 +34,21 @@
 
 	ComObject::~ComObject()
 	{
-		if( m_Owner != nullptr )
-			return;
-
 		Destruct();
+
+		GC::SuppressFinalize(this);
 	}
 
-	bool ComObject::Disposed::get()
+	ComObject::!ComObject()
 	{
-		if( m_Unknown == 0 )
-			return true;
-
-		if( !ObjectTable::Contains( this ) )
-			return true;
-
-		return false;
+		Destruct();
 	}
-	
+
 	IntPtr ComObject::ComPointer::get()
 	{
 		return IntPtr( m_Unknown );
 	}
 
-	ComObject^ ComObject::Owner::get()
-	{
-		return m_Owner;
-	}
-	
-	void ComObject::Owner::set( ComObject^ value )
-	{
-		m_Owner = value;
-	}
-
 	IUnknown* ComObject::UnknownPointer::get()
 	{
 		return m_Unknown;
@@ -81,37 +64,12 @@
 		m_Flags = flags;
 	}
 	
-	void ComObject::SetSource( System::Diagnostics::StackTrace^ stack )
-	{
-		m_Source = stack;
-	}
-
-	System::Diagnostics::StackTrace^ ComObject::CreationSource::get()
-	{
-		return m_Source;
-	}
-
-	void ComObject::SetCreationTime( int time )
-	{
-		m_CreationTime = time;
-	}
-
-	int ComObject::CreationTime::get()
-	{
-		return m_CreationTime;
-	}
-
 	void ComObject::Construct( IUnknown* pointer, ComObject^ owner, bool addToTable )
 	{
 		if( pointer == 0 )
 			throw gcnew ArgumentNullException( "pointer" );
 
 		m_Unknown = pointer;
-
-		if (addToTable)
-			ObjectTable::Add( this, owner );
-		else
-			ObjectTable::RegisterParent( this, owner );
 	}
 	
 	void ComObject::Construct( IUnknown* pointer )
@@ -125,7 +83,7 @@
 			throw gcnew ArgumentNullException( "pointer" );
 
 		m_Unknown = pointer;
-		ObjectTable::Add( this, owner );
+		(void)owner;
 	}
 
 	void ComObject::Construct( IntPtr pointer, Guid guid )
@@ -144,18 +102,8 @@
 
 	void ComObject::Destruct()
 	{
-		if( m_Unknown == 0 || !ObjectTable::Remove( this ) )
+		if( m_Unknown != 0 )
 		{
-			// test for CreationTime is to avoid throwing ObjectDisposedException when
-			// a constructor for an object fails
-			if( Configuration::DetectDoubleDispose && CreationTime != 0 )
-			{
-				Type^ myType = GetType();
-				throw gcnew ObjectDisposedException( myType->FullName );
-			}
-		}
-		else
-		{
 			if( static_cast<int>( m_Flags & ComObjectFlags::IsAncillary ) == 0 )
 				m_Unknown->Release();
 
Index: source/math/Color4.cpp
===================================================================
--- source/math/Color4.cpp	(revision 2067)
+++ source/math/Color4.cpp	(working copy)
@@ -26,8 +26,6 @@
 #include "Color4.h"
 
 #include "Color3.h"
-#include "Vector3.h"
-#include "Vector4.h"
 
 using namespace System;
 using namespace System::Globalization;
@@ -78,22 +76,6 @@
 		Blue = color.Blue;
 	}
 
-	Color4::Color4( Vector3 color )
-	{
-		Alpha = 1.0f;
-		Red = color.X;
-		Green = color.Y;
-		Blue = color.Z;
-	}
-
-	Color4::Color4( Vector4 color )
-	{
-		Alpha = color.W;
-		Red = color.X;
-		Green = color.Y;
-		Blue = color.Z;
-	}
-
 	Color4::Color4( int argb )
 	{
 		Alpha = ( ( argb >> 24 ) & 255 ) / 255.0f;
@@ -129,16 +111,6 @@
 		return static_cast<int>( value );
 	}
 
-	Vector3 Color4::ToVector3()
-	{
-		return Vector3( Red, Green, Blue );
-	}
-
-	Vector4 Color4::ToVector4()
-	{
-		return Vector4( Red, Green, Blue, Alpha );
-	}
-
 	Color4 Color4::Add( Color4 color1, Color4 color2 )
 	{
 		return Color4( color1.Alpha + color2.Alpha, color1.Red + color2.Red, color1.Green + color2.Green, color1.Blue + color2.Blue );
@@ -302,16 +274,6 @@
 		return value.ToColor();
 	}
 
-	Color4::operator Vector3( Color4 value )
-	{
-		return value.ToVector3();
-	}
-
-	Color4::operator Vector4( Color4 value )
-	{
-		return value.ToVector4();
-	}
-
 	Color4::operator Color4( int value )
 	{
 		return Color4( value );
@@ -327,16 +289,6 @@
 		return Color4( value );
 	}
 
-	Color4::operator Color4( Vector3 value )
-	{
-		return Color4( value );
-	}
-
-	Color4::operator Color4( Vector4 value )
-	{
-		return Color4( value );
-	}
-
 	String^ Color4::ToString()
 	{
 		return String::Format( CultureInfo::CurrentCulture, "A:{0} R:{1} G:{2} B:{3}", 
Index: source/math/Rational.h
===================================================================
--- source/math/Rational.h	(revision 2067)
+++ source/math/Rational.h	(working copy)
@@ -21,8 +21,6 @@
 */
 #pragma once
 
-#include "../design/RationalConverter.h"
-
 namespace SlimDX
 {
 	/// <summary>
@@ -30,7 +28,6 @@
 	/// </summary>
 	[System::Serializable]
 	[System::Runtime::InteropServices::StructLayout( System::Runtime::InteropServices::LayoutKind::Sequential )]
-	[System::ComponentModel::TypeConverter( SlimDX::Design::RationalConverter::typeid )]
 	public value class Rational : System::IEquatable<Rational>
 	{
 	public:
Index: source/math/Color3.h
===================================================================
--- source/math/Color3.h	(revision 2067)
+++ source/math/Color3.h	(working copy)
@@ -21,8 +21,6 @@
 */
 #pragma once
 
-#include "../design/Color3Converter.h"
-
 namespace SlimDX
 {
 	/// <summary>
@@ -30,7 +28,6 @@
 	/// </summary>
 	[System::Serializable]
 	[System::Runtime::InteropServices::StructLayout(System::Runtime::InteropServices::LayoutKind::Sequential)]
-	[System::ComponentModel::TypeConverter( SlimDX::Design::Color3Converter::typeid )]
 	public value class Color3 : System::IEquatable<Color3>
 	{
 	public:
Index: source/math/Color4.h
===================================================================
--- source/math/Color4.h	(revision 2067)
+++ source/math/Color4.h	(working copy)
@@ -21,8 +21,6 @@
 */
 #pragma once
 
-#include "../design/Color4Converter.h"
-
 struct D3DXCOLOR;
 
 using System::Runtime::InteropServices::OutAttribute;
@@ -30,15 +28,12 @@
 namespace SlimDX
 {
 	value class Color3;
-	value class Vector3;
-	value class Vector4;
 		
 	/// <summary>
 	/// A four-component (RGBA) color value; each component is a float in the range [0,1].
 	/// </summary>
 	[System::Serializable]
 	[System::Runtime::InteropServices::StructLayout(System::Runtime::InteropServices::LayoutKind::Sequential)]
-	[System::ComponentModel::TypeConverter( SlimDX::Design::Color4Converter::typeid )]
 	public value class Color4
 	{
 	internal:
@@ -98,18 +93,6 @@
 		/// <summary>
 		/// Initializes a new instance of the <see cref="Color4"/> structure.
 		/// </summary>
-		/// <param name="color">The color whose components should be converted.</param>
-		Color4( Vector3 color );
-
-		/// <summary>
-		/// Initializes a new instance of the <see cref="Color4"/> structure.
-		/// </summary>
-		/// <param name="color">The color whose components should be converted.</param>
-		Color4( Vector4 color );
-
-		/// <summary>
-		/// Initializes a new instance of the <see cref="Color4"/> structure.
-		/// </summary>
 		/// <param name="argb">A packed integer containing all four color components.</param>
 		Color4( int argb );
 
@@ -132,18 +115,6 @@
 		int ToArgb();
 
 		/// <summary>
-		/// Converts the color into a three component vector.
-		/// </summary>
-		/// <returns>A three component vector containing the red, green, and blue components of the color.</returns>
-		Vector3 ToVector3();
-
-		/// <summary>
-		/// Converts the color into a four component vector.
-		/// </summary>
-		/// <returns>A four component vector containing all four color components.</returns>
-		Vector4 ToVector4();
-
-		/// <summary>
 		/// Adds two colors.
 		/// </summary>
 		/// <param name="color1">The first color to add.</param>
@@ -359,20 +330,6 @@
 		static explicit operator Color3( Color4 value );
 
 		/// <summary>
-		/// Performs an explicit conversion from <see cref="Color4"/> to <see cref="Vector3"/>.
-		/// </summary>
-		/// <param name="value">The value to be converted.</param>
-		/// <returns>The converted value.</returns>
-		static explicit operator Vector3( Color4 value );
-
-		/// <summary>
-		/// Performs an explicit conversion from <see cref="Color4"/> to <see cref="Vector4"/>.
-		/// </summary>
-		/// <param name="value">The value to be converted.</param>
-		/// <returns>The converted value.</returns>
-		static explicit operator Vector4( Color4 value );
-
-		/// <summary>
 		/// Performs an explicit conversion from <see cref="System::Int32"/> to <see cref="Color4"/>.
 		/// </summary>
 		/// <param name="value">The value to be converted.</param>
@@ -387,20 +344,6 @@
 		static explicit operator Color4( Color3 value );
 
 		/// <summary>
-		/// Performs an explicit conversion from <see cref="Vector3"/> to <see cref="Color4"/>.
-		/// </summary>
-		/// <param name="value">The value to be converted.</param>
-		/// <returns>The converted value.</returns>
-		static explicit operator Color4( Vector3 value );
-
-		/// <summary>
-		/// Performs an explicit conversion from <see cref="Vector4"/> to <see cref="Color4"/>.
-		/// </summary>
-		/// <param name="value">The value to be converted.</param>
-		/// <returns>The converted value.</returns>
-		static explicit operator Color4( Vector4 value );
-
-		/// <summary>
 		/// Performs an implicit conversion from <see cref="System::Drawing::Color"/> to <see cref="Color4"/>.
 		/// </summary>
 		/// <param name="value">The value to be converted.</param>
Index: source/windows/RenderForm.cpp
===================================================================
--- source/windows/RenderForm.cpp	(revision 2067)
+++ source/windows/RenderForm.cpp	(working copy)
@@ -22,7 +22,6 @@
 #include "stdafx.h"
 
 #include "../InternalHelpers.h"
-#include "../Resources.h"
 
 #include "RenderForm.h"
 
@@ -53,8 +52,6 @@
 
 		ResizeRedraw = true;
 		SetStyle( ControlStyles::AllPaintingInWmPaint | ControlStyles::UserPaint, true );
-
-		Icon = SlimDX::Resources::BlackIcon;
 	}
 
 	void RenderForm::OnResizeBegin( EventArgs^ e )
Index: source/Utilities.cpp
===================================================================
--- source/Utilities.cpp	(revision 2067)
+++ source/Utilities.cpp	(working copy)
@@ -23,7 +23,6 @@
 
 #include "DataStream.h"
 #include "Utilities.h"
-#include "multimedia/WaveStream.h"
 
 #include "SlimDXException.h"
 
@@ -32,7 +31,6 @@
 using namespace System::IO;
 using namespace System::Reflection;
 using namespace System::Globalization;
-using namespace SlimDX::Multimedia;
 
 namespace SlimDX
 {
@@ -293,13 +291,6 @@
 			return ms->GetBuffer();
 		}*/
 
-		WaveStream^ ws = dynamic_cast<WaveStream^>( stream );
-		if( ws != nullptr && dataStream != NULL && ws->InternalMemory != nullptr )
-		{
-			*dataStream = ws->InternalMemory;
-			return nullptr;
-		}
-
 		array<Byte>^ buffer = gcnew array<Byte>( readLength ); 
 		int bytesRead = 0;
 		while( bytesRead < readLength )
Index: source/Result.cpp
===================================================================
--- source/Result.cpp	(revision 2067)
+++ source/Result.cpp	(working copy)
@@ -53,7 +53,17 @@
 
 		if( m_Info->Name == nullptr )
 		{
-			m_Info->Name = gcnew String( DXGetErrorString( m_Code ) );
+			char* message = 0;
+			if (FormatMessageA(FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS, NULL, m_Code, MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), (LPSTR)&message, 0, NULL) != 0)
+			{
+				m_Info->Name = gcnew String( message );
+
+				LocalFree(message);
+			}
+			else
+			{
+				m_Info->Name = gcnew String( "Unknown error code" );
+			}
 		}
 
 		return m_Info->Name;
@@ -68,7 +78,7 @@
 
 		if( m_Info->Description == nullptr )
 		{
-			m_Info->Description = gcnew String( DXGetErrorDescription( m_Code ) );
+			m_Info->Description = gcnew String( "" );
 		}
 		
 		return m_Info->Description;
@@ -184,7 +194,7 @@
 
 	String^ Result::ToString()
 	{
-		return String::Format( CultureInfo::CurrentCulture, "{0}: {1} ({2})", Name, Description, Code );
+		return String::Format( CultureInfo::CurrentCulture, "({2}) {0}", Name, Description, Code );
 	}
 
 	int Result::GetHashCode()
Index: source/ObjectTable.h
===================================================================
--- source/ObjectTable.h	(revision 2067)
+++ source/ObjectTable.h	(working copy)
@@ -31,97 +31,19 @@
 	ref class Configuration;
 #endif
 
-	public ref class ObjectTableEventArgs : System::EventArgs
-	{
-	public:
-		/// <summary>
-		/// The <see cref="ComObject">COM object</see> that this notification refers to.
-		/// </summary>
-		property ComObject^ ComObject;
-
-		ObjectTableEventArgs( SlimDX::ComObject^ comObject )
-		{
-			ComObject = comObject;
-		}
-	};
-
-	/// <summary>
-	/// Maintains a list of all the <see cref="ComObject">COM objects</see> managed by SlimDX.
-	/// </summary>
 	public ref class ObjectTable sealed
 	{
-	private:
-		static ObjectTable();
-		ObjectTable();
-
-		static System::Collections::Generic::Dictionary<System::IntPtr, ComObject^>^ m_Table;
-		static System::Collections::Generic::Dictionary<System::IntPtr, System::Collections::Generic::List<ComObject^>^>^ m_Ancillary;
-		static Object^ m_SyncObject;
-
-		static void OnExit( System::Object^ sender, System::EventArgs^ e );
-
 	internal:
-		static ComObject^ Find( System::IntPtr nativeObject );
-		static bool Contains( ComObject^ object );
-
-		static void RegisterParent(ComObject^ comObject, ComObject^ owner);
-
-	public:
-		/// <summary>
-		/// Gets a list of all the <see cref="ComObject">COM objects</see> tracked by SlimDX.
-		/// </summary>
-		/// <remarks>
-		/// Access through this member is NOT thread-safe. Use <see cref="SyncObject" />
-		/// to protect multithreaded access if necessary.
-		/// </remarks>
-		static property System::Collections::ObjectModel::ReadOnlyCollection<ComObject^>^ Objects
+		static ComObject^ Find( System::IntPtr nativeObject )
 		{
-			System::Collections::ObjectModel::ReadOnlyCollection<ComObject^>^ get();
+			(void)nativeObject;
+			return nullptr;
 		}
 
-		/// <summary>
-		/// Occurs after a new object has been added to the object table.
-		/// </summary>
-		static event System::EventHandler<ObjectTableEventArgs^>^ ObjectAdded;
-
-		/// <summary>
-		/// Occurs after an object has been removed from the object table.
-		/// </summary>
-		static event System::EventHandler<ObjectTableEventArgs^>^ ObjectRemoved;
-
-		/// <summary>
-		/// Gets the synchronization object used by the ObjectTable. This object can be used to safely
-		/// access the internal object list.
-		/// </summary>
-		/// <remarks>
-		/// This member should only be used if it is necesssary to access the <see cref="Objects" /> property
-		/// in a thread-safe manner, and should not be used as anything other than a parameter for
-		/// functions in <see cref="System::Threading::Monitor" />.
-		/// </remarks>
-		static property Object^ SyncObject
+		static bool Contains( ComObject^ object )
 		{
-			Object^ get();
+			(void)object;
+			return false;
 		}
-		
-		/// <summary>
-		/// Adds a <see cref="ComObject">COM object</see> to the table. This will set the object's <see cref="SlimDX::ComObject"/><c>::CreationSource</c> property if
-		/// <see cref="SlimDX::Configuration"/><c>::EnableObjectTracking</c>object tracking is on.
-		/// </summary>
-		/// <param name="comObject">The object to add.</param>
-		static void Add( ComObject^ comObject, ComObject^ owner );
-		
-		/// <summary>
-		/// Removes a <see cref="SlimDX::ComObject">COM object</see> from the table.
-		/// </summary>
-		/// <param name="comObject">The object to remove.</param>
-		/// <returns><c>true</c> if the object was in the table and was removed; otherwise, <c>false</c>.</returns>
-		static bool Remove( ComObject^ comObject );
-		
-		/// <summary>
-		/// Generates a report of all outstanding COM objects (objects that have not been disposed)
-		/// tracked by SlimDX. The report includes the object's type and a stack trace to its creation point.
-		/// </summary>
-		/// <returns>A string containing the leak report.</returns>
-		static System::String^ ReportLeaks();
 	};
 }
\ No newline at end of file
Index: source/DataStream.cpp
===================================================================
--- source/DataStream.cpp	(revision 2067)
+++ source/DataStream.cpp	(working copy)
@@ -35,20 +35,6 @@
 
 namespace SlimDX
 {
-	DataStream::DataStream( ID3DXBuffer* buffer )
-	{
-		if( buffer->GetBufferSize() < 1 )
-			throw gcnew ArgumentException( "Buffer size is less than 1." );
-
-		m_Buffer = static_cast<char*>( buffer->GetBufferPointer() );
-		m_Size = buffer->GetBufferSize();
-		
-		m_CanRead = true;
-		m_CanWrite = true;
-		
-		m_ID3DXBuffer = buffer;
-	}
-
 	DataStream::DataStream( const void* buffer, Int64 sizeInBytes, bool canRead, bool makeCopy )
 	{
 		if( sizeInBytes < 1 )
@@ -178,12 +164,6 @@
 			m_OwnsBuffer = false;
 		}
 		
-		if( m_ID3DXBuffer != 0 )
-		{
-			m_ID3DXBuffer->Release();
-			m_ID3DXBuffer = 0;
-		}
-		
 		if( m_GCHandle.IsAllocated )
 		{
 			m_GCHandle.Free();
@@ -214,22 +194,6 @@
 		return pointer;
 	}
 
-	ID3DXBuffer* DataStream::GetD3DBuffer()
-	{
-		if( m_ID3DXBuffer != 0 )
-			return m_ID3DXBuffer;
-
-		ID3DXBuffer *temp;
-		HRESULT hr = D3DXCreateBuffer( static_cast<DWORD>( m_Size ), &temp );
-		if( FAILED( hr ) )
-			throw gcnew OutOfMemoryException();
-
-		m_ID3DXBuffer = temp;
-
-		memcpy( m_ID3DXBuffer->GetBufferPointer(), m_Buffer, static_cast<size_t>( m_Size ) );
-		return m_ID3DXBuffer;
-	}
-
 	Int64 DataStream::Seek( Int64 offset, SeekOrigin origin )
 	{
 		Int64 targetPosition = 0;
Index: source/ComObject.h
===================================================================
--- source/ComObject.h	(revision 2067)
+++ source/ComObject.h	(working copy)
@@ -61,10 +61,7 @@
 	{
 	private:
 		IUnknown* m_Unknown;
-		ComObject^ m_Owner;
 		ComObjectFlags m_Flags;
-		System::Diagnostics::StackTrace^ m_Source;
-		int m_CreationTime;
 
 	private protected:
 		ComObject();
@@ -84,14 +81,6 @@
 			if( pointer == 0 )
 				return nullptr;
 			
-			M^ tableEntry = safe_cast<M^>( SlimDX::ObjectTable::Find( static_cast<System::IntPtr>( pointer ) ) );
-			if( tableEntry != nullptr )
-			{
-				if( static_cast<int>( flags & ComObjectFlags::IsAncillary ) == 0 ) 
-					pointer->Release();
-				return tableEntry;
-			}
-
 			M^ result = gcnew M( pointer, owner );
 			result->SetFlags( flags );
 			return result;
@@ -106,12 +95,6 @@
 			if( pointer == System::IntPtr::Zero )
 				throw gcnew System::ArgumentNullException( "pointer" );
 
-			M^ tableEntry = safe_cast<M^>( SlimDX::ObjectTable::Find( static_cast<System::IntPtr>( pointer ) ) );
-			if( tableEntry != nullptr )
-			{
-				return tableEntry;
-			}
-
 			M^ result = gcnew M( pointer );
 			result->SetFlags( ComObjectFlags::IsExternal );
 			return result;
@@ -128,24 +111,9 @@
 			IUnknown* get();
 		}
 
-		property ComObject^ Owner 
-		{
-			ComObject^ get();
-			void set( ComObject^ value );
-		}
-		
 		void SetFlags( ComObjectFlags flags );
-		void SetSource( System::Diagnostics::StackTrace^ stack );
-		void SetCreationTime( int time );
 		
 	public:
-		/// <summary>
-		/// Gets a value that indicates whether the object has been disposed.
-		/// </summary>
-		property bool Disposed
-		{
-			bool get();
-		}
 		
 		/// <summary>
 		/// Gets an <see cref="IntPtr">IntPtr</see> to the underlying native COM interface.
@@ -156,35 +124,9 @@
 		}
 		
 		/// <summary>
-		/// Gets a <see cref="StackTrace"/> to the location where the object was created.
-		/// </summary>
-		property System::Diagnostics::StackTrace^ CreationSource
-		{
-			System::Diagnostics::StackTrace^ get();
-		}
-		
-		/// <summary>
-		/// Gets the timestamp, in milliseconds, of the object'ss creation.
-		/// </summary>
-		property int CreationTime
-		{
-			int get();
-		}
-		
-		/// <summary>
-		/// Gets or sets a value indicating whether or not the object is in the default allocation pool.
-		/// </summary>
-		property bool IsDefaultPool;
-		
-		/// <summary>
-		/// Extra tag data stored along with the object. This member is intended for use by users of SlimDX
-		/// and has no internal meaning to the library.
-		/// </summary>
-		property Object^ Tag;
-
-		/// <summary>
 		/// Releases all resources used by the <see cref="SlimDX::ComObject"/>.
 		/// </summary>
 		virtual ~ComObject();
+		!ComObject();
 	};
 }
\ No newline at end of file
Index: source/d3dcompiler/ShaderBytecodeDC.cpp
===================================================================
--- source/d3dcompiler/ShaderBytecodeDC.cpp	(revision 2067)
+++ source/d3dcompiler/ShaderBytecodeDC.cpp	(working copy)
@@ -41,7 +41,7 @@
 	{
 		ID3D10Blob *blob;
 
-		HRESULT hr = D3D10CreateBlob( length, &blob );
+		HRESULT hr = D3DCreateBlob( length, &blob );
 		if( RECORD_D3DC( hr ).IsFailure )
 			throw gcnew D3DCompilerException( Result::Last );
 
@@ -55,7 +55,7 @@
 			throw gcnew ArgumentNullException( "data" );
 
 		ID3D10Blob *blob;
-		HRESULT hr = D3D10CreateBlob( static_cast<SIZE_T>(data->Length), &blob );
+		HRESULT hr = D3DCreateBlob( static_cast<SIZE_T>(data->Length), &blob );
 		if( RECORD_D3DC( hr ).IsFailure )
 			throw gcnew D3DCompilerException( Result::Last );
 
Index: source/DataStream.h
===================================================================
--- source/DataStream.h	(revision 2067)
+++ source/DataStream.h	(working copy)
@@ -43,7 +43,6 @@
 	private:
 		char* m_Buffer;
 		bool m_OwnsBuffer;
-		ID3DXBuffer *m_ID3DXBuffer;
 		
 		System::Int64 m_Size;
 		System::Int64 m_Position;
@@ -54,7 +53,6 @@
 		System::Runtime::InteropServices::GCHandle m_GCHandle;
 
 	internal:
-		DataStream( ID3DXBuffer *buffer );
 		DataStream( void* buffer, System::Int64 sizeInBytes, bool canRead, bool canWrite, bool makeCopy );
 		DataStream( const void *buffer, System::Int64 sizeInBytes, bool canRead, bool makeCopy );
 
@@ -75,7 +73,6 @@
 
 		char* SeekToEnd();
 
-		ID3DXBuffer* GetD3DBuffer();
 		void Destruct();
 
 	public:
