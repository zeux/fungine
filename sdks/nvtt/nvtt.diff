Index: src/nvtt/TaskDispatcher.h
===================================================================
--- src/nvtt/TaskDispatcher.h	(revision 1256)
+++ src/nvtt/TaskDispatcher.h	(working copy)
@@ -19,7 +19,7 @@
 #if NV_OS_WIN32 && _MSC_VER >= 1600
 #define HAVE_PPL 1
 #include <array>
-//#include <ppl.h>
+#include <ppl.h>
 #endif
 
 // Intel Thread Building Blocks (TBB).
@@ -81,24 +81,6 @@
 
 #if defined(HAVE_PPL)
 
-    class CountingIterator
-    {
-    public:
-        CountingIterator() : i(0) {}
-        CountingIterator(const CountingIterator & rhs) : i(0) {}
-        explicit CountingIterator(int x) : i(x) {}
-
-        const int & operator*() const { return i; }
-        CountingIterator & operator++() { i++; return *this; }
-        CountingIterator & operator--() { i--; return *this; }
-
-        bool operator==(const CountingIterator& o) const { return i == o.i; }
-        bool operator!=(const CountingIterator& o) const { return i != o.i; }
-
-    private:
-        int i;
-    };
-
     struct TaskFunctor {
         TaskFunctor(Task * task, void * context) : task(task), context(context) {}
         void operator()(int n) const {
@@ -113,12 +95,9 @@
     {
         virtual void dispatch(Task * task, void * context, int count)
         {
-            CountingIterator begin(0);
-            CountingIterator end((int)count);
             TaskFunctor func(task, context);
 
-            std::for_each(begin, end, func);
-            //parallel_for_each(begin, end, func);
+            Concurrency::parallel_for(0, count, func);
         }
     };
